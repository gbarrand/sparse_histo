// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_histo_sb2
#define inlib_histo_sb2

#include "base_shisto"

#include <ostream>

namespace inlib {
namespace histo {

template <class TC,class TO,class TN,class TW,class TH>
class sb2 : public base_shisto<TC,TO,TN,TW,TH> {
  typedef base_shisto<TC,TO,TN,TW,TH> parent;
protected:
  enum {AxisX=0,AxisY=1};
public:
  typedef axis<TC,TO> axis_t;
  typedef typename parent::bn_t bn_t;
  typedef sbin<TC,TN,TW> bin_t;
public:
  virtual TH bin_error(int,int) const = 0; //for print
public:
  void update_fast_getters() {
    m_in_range_entries = 0;
    m_in_range_Sw = 0;
    m_in_range_Sxw = 0;
    m_in_range_Syw = 0;
    m_in_range_Sx2w = 0;
    m_in_range_Sy2w = 0;

   {typedef typename std::map<TO,bin_t*>::const_iterator it_t;
    for(it_t it=parent::m_bins.begin();it!=parent::m_bins.end();++it){
      if(!histo::is_out(parent::m_axes,(*it).first)) {
        const bin_t* bin = (*it).second;
        m_in_range_entries += bin->m_entries;
        m_in_range_Sw += bin->m_Sw;
        m_in_range_Sxw += bin->m_Sxw[0];
        m_in_range_Syw += bin->m_Sxw[1];
        m_in_range_Sx2w += bin->m_Sx2w[0];
        m_in_range_Sy2w += bin->m_Sx2w[1];
      }
    }}
  }

  // Partition :
  TC mean_x() const {
    if(m_in_range_Sw==0) return 0;
    return m_in_range_Sxw/m_in_range_Sw;
  }

  TC mean_y() const {
    if(m_in_range_Sw==0) return 0;
    return m_in_range_Syw/m_in_range_Sw;
  }

  TC rms_x() const {
    if(m_in_range_Sw==0) return 0;
    TC mean = m_in_range_Sxw/m_in_range_Sw;
    return ::sqrt(::fabs((m_in_range_Sx2w / m_in_range_Sw) - mean * mean));
  }

  TC rms_y() const {
    if(m_in_range_Sw==0) return 0;
    TC mean = m_in_range_Syw/m_in_range_Sw;
    return ::sqrt(::fabs((m_in_range_Sy2w / m_in_range_Sw) - mean * mean));
  }

  int coord_to_index_x(TC aCoord) const {
    return axis_x().coord_to_index(aCoord);
  }
  int coord_to_index_y(TC aCoord) const {
    return axis_y().coord_to_index(aCoord);
  }

  // bins :
  TN bin_entries(int aI,int aJ) const {   
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return bin->m_entries;
  }

  TW bin_Sw(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return bin->m_Sw;
  }

  TW bin_Sw2(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return bin->m_Sw2;
  }
  TC bin_Sxw(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return bin->m_Sxw[AxisX];
  }
  TC bin_Sx2w(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return bin->m_Sx2w[AxisX];
  }
  TC bin_Syw(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return bin->m_Sxw[AxisY];
  }
  TC bin_Sy2w(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return bin->m_Sx2w[AxisY];
  }

  TH bin_height(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    return this->get_bin_height(*bin);
  }

  TC bin_center_x(int aI) const {
    return parent::m_axes[0].bin_center(aI);
  }
  TC bin_center_y(int aJ) const {
    return parent::m_axes[1].bin_center(aJ);
  }

  TC bin_mean_x(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    TW sw = bin->m_Sw;
    if(sw==0) return 0;
    return bin->m_Sxw[AxisX]/sw;
  }

  TC bin_mean_y(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    TW sw = bin->m_Sw;
    if(sw==0) return 0;
    return bin->m_Sxw[AxisY]/sw;
  }

  TC bin_rms_x(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    TW sw = bin->m_Sw;
    if(sw==0) return 0;
    TC sxw = bin->m_Sxw[AxisX];
    TC sx2w = bin->m_Sx2w[AxisX];
    TC mean = sxw/sw;
    return ::sqrt(::fabs((sx2w / sw) - mean * mean));
  }

  TC bin_rms_y(int aI,int aJ) const {
    bin_t* bin;
    if(!_find_bin(aI,aJ,bin)) return 0;
    TW sw = bin->m_Sw;
    if(sw==0) return 0;
    TC sxw = bin->m_Sxw[AxisY];
    TC sx2w = bin->m_Sx2w[AxisY];
    TC mean = sxw/sw;
    return ::sqrt(::fabs((sx2w / sw) - mean * mean));
  }

  // Axes :
  const axis_t& axis_x() const {return parent::m_axes[0];}
  const axis_t& axis_y() const {return parent::m_axes[1];}
  axis_t& axis_x() {return parent::m_axes[0];} //touchy
  axis_t& axis_y() {return parent::m_axes[1];} //touchy

  // Projection :
/*
  TN bin_entries_x(int aI) const {
    if(!parent::m_dimension) return 0;
    bn_t ibin;
    if(!parent::m_axes[0].in_range_to_absolute_index(aI,ibin)) return 0;
    bn_t ybins = parent::m_axes[1].bins()+2;
    TO offset;
    TN _entries = 0;
    for(bn_t jbin=0;jbin<ybins;jbin++) {
      offset = ibin + jbin * parent::m_axes[1].m_offset;
      _entries += parent::m_bin_entries[offset];
    }
    return _entries;
  }

  TW bin_height_x(int aI) const {
    if(!parent::m_dimension) return 0;
    bn_t ibin;
    if(!parent::m_axes[0].in_range_to_absolute_index(aI,ibin)) return 0;
    bn_t ybins = parent::m_axes[1].bins()+2;
    TO offset;
    TW sw = 0;
    for(bn_t jbin=0;jbin<ybins;jbin++) {
      offset = ibin + jbin * parent::m_axes[1].m_offset;
      sw += this->get_bin_height(offset);
    }
    return sw;
  }

  TN bin_entries_y(int aJ) const {
    if(!parent::m_dimension) return 0;
    bn_t jbin;
    if(!parent::m_axes[1].in_range_to_absolute_index(aJ,jbin)) return 0;
    bn_t xbins = parent::m_axes[0].bins()+2;
    TO offset;
    TN _entries = 0;
    for(bn_t ibin=0;ibin<xbins;ibin++) {
      offset = ibin + jbin * parent::m_axes[1].m_offset;
      _entries += parent::m_bin_entries[offset];
    }
    return _entries;
  }

  TW bin_height_y(int aJ) const {
    if(!parent::m_dimension) return 0;
    bn_t jbin;
    if(!parent::m_axes[1].in_range_to_absolute_index(aJ,jbin)) return 0;
    bn_t xbins = parent::m_axes[0].bins()+2;
    TO offset;
    TW sw = 0;
    for(bn_t ibin=0;ibin<xbins;ibin++) {
      offset = ibin + jbin * parent::m_axes[1].m_offset;
      sw += this->get_bin_height(offset);
    }
    return sw;
  }
*/
public:
  //NOTE : print is a Python keyword.
  void hprint(std::ostream& a_out) {
    // A la HPRINT.
    a_out << parent::dimension() << parent::title() << std::endl;
    a_out 
      << " * ENTRIES = " << parent::all_entries() << std::endl;
  
    //   6 | 7 | 8
    //  -----------
    //   3 | 4 | 5
    //  -----------
    //   0 | 1 | 2
  
    TW height_0 = bin_height(axis_t::UNDERFLOW_BIN,
                                           axis_t::UNDERFLOW_BIN);
    TW height_2 = bin_height(axis_t::OVERFLOW_BIN,
                                           axis_t::UNDERFLOW_BIN);
    TW height_6 = bin_height(axis_t::UNDERFLOW_BIN,
                                           axis_t::OVERFLOW_BIN);
    TW height_8 = bin_height(axis_t::OVERFLOW_BIN,
                                           axis_t::OVERFLOW_BIN);
  
    bn_t i,j;
  
    TW height_1 = 0;
    TW height_7 = 0;
    for(i=0;i<axis_x().bins();i++){
      height_1 += bin_height(i,axis_t::UNDERFLOW_BIN);
      height_7 += bin_height(i,axis_t::OVERFLOW_BIN);
    }
  
    TW height_3 = 0;
    TW height_5 = 0;
    for(j=0;j<axis_y().bins();j++){
      height_3 += bin_height(axis_t::UNDERFLOW_BIN,j);
      height_5 += bin_height(axis_t::OVERFLOW_BIN,j);
    }
  
    TW height_4 = 0;
    for(i=0;i<axis_x().bins();i++){
      for(j=0;j<axis_y().bins();j++){
        height_4 += bin_height(i,j);
      }
    }
  
    a_out 
      << " " << height_6 << " " << height_7 << " " << height_8 << std::endl;
    a_out 
      << " " << height_3 << " " << height_4 << " " << height_5 << std::endl;
    a_out 
      << " " << height_0 << " " << height_1 << " " << height_2 << std::endl;
  
    // Some bins :
    bn_t xbins = axis_x().bins();
    bn_t ybins = axis_y().bins();
    a_out 
      << " * ENTRIES[0,0]     = " 
      << bin_entries(0,0)    
      << " * HEIGHT[0,0] = " 
      << bin_height(0,0)    
      << " * ERROR[0,0] = "     
      << bin_error(0,0)    
      << std::endl;
    a_out 
      << " * ENTRIES[N/2,N/2] = " 
      << bin_entries(xbins/2,ybins/2)    
      << " * HEIGHT[N/2,N/2] = " 
      << bin_height(xbins/2,ybins/2)
      << " * ERROR[N/2,N/2] = " 
      << bin_error(xbins/2,ybins/2)
      << std::endl;
    a_out 
      << " * ENTRIES[N-1,N-1] = " 
      << bin_entries(xbins-1,ybins-1)    
      << " * HEIGHT[N-1,N-1] = " 
      << bin_height(xbins-1,ybins-1)
      << " * ERROR[N-1,N-1] = " 
      << bin_error(xbins-1,ybins-1)
      << std::endl;
  }
protected:
  sb2(const std::string& a_title,
      bn_t aXnumber,TC aXmin,TC aXmax,
      bn_t aYnumber,TC aYmin,TC aYmax)
  :m_in_range_entries(0)
  ,m_in_range_Sw(0)
  ,m_in_range_Sxw(0)
  ,m_in_range_Syw(0)
  ,m_in_range_Sx2w(0)
  ,m_in_range_Sy2w(0)
  {
    parent::m_title = a_title;
    std::vector<bn_t> nbins;
    nbins.push_back(aXnumber);
    nbins.push_back(aYnumber);
    std::vector<TC> mins;
    mins.push_back(aXmin);
    mins.push_back(aYmin);
    std::vector<TC> maxs;
    maxs.push_back(aXmax);
    maxs.push_back(aYmax);
    parent::configure(2,nbins,mins,maxs);
  }

  sb2(const std::string& a_title,
      const std::vector<TC>& aEdgesX,
      const std::vector<TC>& aEdgesY)
  :m_in_range_entries(0)
  ,m_in_range_Sw(0)
  ,m_in_range_Sxw(0)
  ,m_in_range_Syw(0)
  ,m_in_range_Sx2w(0)
  ,m_in_range_Sy2w(0)
  {
    parent::m_title = a_title;
    std::vector< std::vector<TC> > edges(2);
    edges[0] = aEdgesX;
    edges[1] = aEdgesY;
    parent::configure(2,edges);
  }

  virtual ~sb2(){}
protected:
  sb2(const sb2& a_from):parent(a_from)
  ,m_in_range_entries(a_from.m_in_range_entries)
  ,m_in_range_Sw(a_from.m_in_range_Sw)
  ,m_in_range_Sxw(a_from.m_in_range_Sxw)
  ,m_in_range_Syw(a_from.m_in_range_Syw)
  ,m_in_range_Sx2w(a_from.m_in_range_Sx2w)
  ,m_in_range_Sy2w(a_from.m_in_range_Sy2w)
  {
    update_fast_getters();
  }

  sb2& operator=(const sb2& a_from) {
    parent::operator=(a_from);
    m_in_range_entries = a_from.m_in_range_entries;
    m_in_range_Sw = a_from.m_in_range_Sw;
    m_in_range_Sxw = a_from.m_in_range_Sxw;
    m_in_range_Syw = a_from.m_in_range_Syw;
    m_in_range_Sx2w = a_from.m_in_range_Sx2w;
    m_in_range_Sy2w = a_from.m_in_range_Sy2w;
    update_fast_getters();
    return *this;
  }

public:
  bool configure(bn_t aXnumber,TC aXmin,TC aXmax,
                 bn_t aYnumber,TC aYmin,TC aYmax){
    m_in_range_entries = 0;
    m_in_range_Sw = 0;
    m_in_range_Sxw = 0;
    m_in_range_Syw = 0;
    m_in_range_Sx2w = 0;
    m_in_range_Sy2w = 0;

    std::vector<bn_t> nbins;
    nbins.push_back(aXnumber);
    nbins.push_back(aYnumber);
    std::vector<TC> mins;
    mins.push_back(aXmin);
    mins.push_back(aYmin);
    std::vector<TC> maxs;
    maxs.push_back(aXmax);
    maxs.push_back(aYmax);
    return parent::configure(2,nbins,mins,maxs);
  }

  bool configure(const std::vector<TC>& aEdgesX,
                 const std::vector<TC>& aEdgesY){
    m_in_range_entries = 0;
    m_in_range_Sw = 0;
    m_in_range_Sxw = 0;
    m_in_range_Syw = 0;
    m_in_range_Sx2w = 0;
    m_in_range_Sy2w = 0;

    std::vector< std::vector<TC> > edges(2);
    edges[0] = aEdgesX;
    edges[1] = aEdgesY;
    return parent::configure(2,edges);
  }
protected:
  bool _find_bin(int aI,int aJ,bin_t*& a_bin) const {
    if(parent::m_dimension!=2) {a_bin=0;return false;}
    bn_t ibin,jbin;
    if(!parent::m_axes[0].in_range_to_absolute_index(aI,ibin)) {a_bin=0;return false;}
    if(!parent::m_axes[1].in_range_to_absolute_index(aJ,jbin)) {a_bin=0;return false;}
    TO offset = ibin + jbin * parent::m_axes[1].m_offset;
    return parent::find_bin(offset,a_bin);
  }

protected:
  TN m_in_range_entries;
  TW m_in_range_Sw;
  TC m_in_range_Sxw;
  TC m_in_range_Syw;
  TC m_in_range_Sx2w;
  TC m_in_range_Sy2w;
};

}}

#endif




